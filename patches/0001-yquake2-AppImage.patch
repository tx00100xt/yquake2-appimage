--- a/src/client/curl/download.c	2024-02-24 00:33:39.399633405 +0300
+++ b/src/client/curl/download.c	2024-02-24 00:32:38.274295636 +0300
@@ -74,6 +74,9 @@
  * In memory buffer for receiving files. Used
  * as special CURL callback for filelists.
  */
+#ifndef CURLINFO_CONTENT_LENGTH_DOWNLOAD_T
+#define CURLINFO_CONTENT_LENGTH_DOWNLOAD_T CURLINFO_CONTENT_LENGTH_DOWNLOAD
+#endif
 static size_t CL_HTTP_Recv(void *ptr, size_t size, size_t nmemb, void *stream)
 {
 	dlhandle_t *dl = (dlhandle_t *)stream;
--- a/src/client/cl_console.c	2024-02-23 00:12:53.804891093 +0300
+++ b/src/client/cl_console.c	2024-02-23 00:10:21.807597190 +0300
@@ -27,6 +27,9 @@
 #include "header/client.h"
 #include "sound/header/local.h"
 #include <time.h>
+#include <SDL2/SDL.h>
+#include <unistd.h>
+#include <pwd.h>
 
 console_t con;
 cvar_t *con_notifytime;
@@ -335,6 +338,94 @@
 	con.display = con.current;
 }
 
+int 
+AppImage_TestFile(const char *_home_TestFile)
+{
+	char _fnm_home_TestFile[4096];
+	struct passwd *pw = getpwuid(getuid());
+	const char *_homedir = pw->pw_dir;
+	strcpy(_fnm_home_TestFile, _homedir);
+	_fnm_home_TestFile[strlen(_homedir)] = 0x00;
+	strncat (_fnm_home_TestFile, _home_TestFile, strlen(_home_TestFile));
+	printf("Test file: %s\n", (const char *) _fnm_home_TestFile);
+	if( access((const char *) _fnm_home_TestFile, F_OK) == 0 ) {
+		printf("Found path: %s\n", (const char *) _fnm_home_TestFile);
+		return 1;
+	} else {
+		printf("ERROR: Game data not found!\n");
+		return 0;
+	}
+ 	return 1;
+}
+
+void 
+AppImage_Window(void)
+{
+ 
+	typedef enum { false, true } BOOL;
+
+	if(SDL_Init(SDL_INIT_VIDEO) != 0 ) {
+		printf("SDL_Init Error: %s\n",SDL_GetError());
+	}
+
+	SDL_Window *sdl_window = SDL_CreateWindow("Yamagi Quake II AppImage",
+        SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1280, 720, 0);
+	if(sdl_window == NULL) {
+		printf("SDL_Window Error: %s\n",SDL_GetError());
+	}
+ 
+	SDL_Renderer *sdl_renderer = SDL_CreateRenderer(sdl_window, -1, 0);
+	if(sdl_renderer == NULL) {
+		printf("SDL_Renderer Error: %s\n",SDL_GetError());
+	}
+
+	char path_with_bmp[4096]; 
+	char *path = SDL_GetBasePath();
+    strcpy(path_with_bmp, path);
+	strncat(path_with_bmp, "yamagi2.bmp", 11);
+    printf("Path to Texture: %s\n", (const char*)path_with_bmp);
+
+	SDL_Surface *sdl_image = SDL_LoadBMP((const char*)path_with_bmp);
+	if(sdl_image == NULL) {
+		printf("SDL_Surface Error: %s\n",SDL_GetError());
+	}
+	SDL_Texture *sdl_texture = SDL_CreateTextureFromSurface(sdl_renderer, sdl_image);
+	if(sdl_texture == NULL) {
+		printf("SDL_Texture Error: %s\n",SDL_GetError());
+	}
+
+	BOOL is_running = true;
+	SDL_Event sdl_event; // instantiate event class, to register events
+
+	while (is_running)
+	{
+		SDL_WaitEvent(&sdl_event);
+		switch (sdl_event.type)
+		{
+		case SDL_KEYDOWN:
+			if (sdl_event.key.keysym.sym == SDLK_ESCAPE) {
+				is_running = false;
+				break;
+			}
+		case SDL_WINDOWEVENT:
+			if (sdl_event.window.event == SDL_WINDOWEVENT_CLOSE) {
+				is_running = false;
+				break;
+			}
+		}
+		SDL_RenderCopy(sdl_renderer, sdl_texture, NULL, NULL); // copy texture to output device
+		SDL_RenderPresent(sdl_renderer); // commit texture to vram
+	}
+
+	// clear and exit
+	SDL_DestroyTexture(sdl_texture);
+	SDL_FreeSurface(sdl_image);
+	SDL_DestroyRenderer(sdl_renderer);
+	SDL_DestroyWindow(sdl_window);
+	SDL_Quit();
+	return;
+}
+
 void
 Con_Init(void)
 {
@@ -354,6 +438,11 @@
 	Cmd_AddCommand("clear", Con_Clear_f);
 	Cmd_AddCommand("condump", Con_Dump_f);
 	con.initialized = true;
+	int appimage_test_pak0 = AppImage_TestFile("/.yq2/baseq2/pak0.pak");
+	if( appimage_test_pak0 == 0 ) {
+		AppImage_Window();
+		exit(1);
+	}
 }
 
 void
